package com.kdy.app.bean;

import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.ArrayList;
import java.util.Random;

import org.apache.commons.codec.binary.Base64;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Component;

@Component
public class RSAArrBean {
	
	ArrayList<String> privateKeyArr = new ArrayList<String>(); // 개인키 array
	ArrayList<String> publicKeyArr = new ArrayList<String>();  // 공개키 array
	
	Logger logger = LoggerFactory.getLogger(RSAArrBean.class);
	
	private PrivateKey privateKey;
	private int rnum;

	public RSAArrBean() {
		logger.info("RSAArrBean()==============================");
		long seed = System.currentTimeMillis();
		Random rand = new Random(seed);
		rnum = rand.nextInt(5);
		
		privateKeyArr.add("MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCWbv/dQ/2Wg7ERwMkOHLHaOW7fOX5717he8LXKSP96utrv4W4AsBv+AHk95+hRTtOjZXDv0z1sI9f5SXykWQaBUGc7OJ3mp6gltFPdDW+lRatQV0WyEizQfFXljig0BgRmWBSTuwmKpFb0zOutxjZRRHeA9lNe4TzKIkcTrpiGCOEZTuxLnEMFbRWLkqx3Q6pbJhjikonpidPcCYmWroWO2XN737Ni3P/mKNHu5VnAhY+DPHDu2DBDlDPmEu1M/ZB5vVZvdAgmDRs7cWwDJIDmUBNK1zUrZU1t/sSlpGvtqOhnfsFKw9Gi4+UKKHdrks4nW8sh8EfhND7rjT61F/+ZAgMBAAECggEAbXhK825FvGEK2rtq070n44DF4OVK2L4radNKxvCGEX6mUce/L/r388fOcrEvCvQM6KuqGqui1+3hfYPvkv1B0Zp79MmHhlDc+MsX+BWN+DwRpX5Mtn+pYvIH4+ul7+2tB/jyyGpkUCK1MKFqo+NIpazoNc2K79GCVinJhVYZofb2mvbTMv+hpWmSRwG6EbcloxSCYGny9UFafqYiQobwvcZFYui5YZC1sbCm5gTT6MFGSXloIDKXhPHKKl+l+rm8Baq/54eKAqS+7M+drboDa/kjy/+5Spzb2NMBkiG0q+uzmG4Qtr+KvSKe9qd8WaBRPPdbBIS6nPRrAdqtHmTPTQKBgQDcqKx4mgs97Q4tdfidRpoEhzFk7akYXL/CPQ5C8F/bqk1nA9BJmk6IVo3GL1cRLjCQIWuJ0qFRejduPOoWr56P3dMLwPH0kSjkVv2NWo9f1ijO/iFhTbtf2sXCkJju/fP74mhgglvgwtrA8SLQcIKyeBm8turqk0kkl1Q0WjNu8wKBgQCuhv1RlOXCYgGahUk8EDJP9OR3z1W9HNXALezQvCtsCOSaFssgch3th2bS65GO64d825wVu4IJ0AyTRCMIpDYZtQcEgXl5Z3QefgqHFb7eetkQMVuqvvxI+zBSHd+iKMgQIpal+zYzDr1iKkhlhimudm+MnMhbkn40Zj044M+yQwKBgASCIbv5Eb+7Jy4AmgrElYMALB8ux+SqiHR0gOUXOi4nxZsUNd47G92nPxBMiU/djLp1JFhViFw8zgMflXzPK8MuuhAkag0gJiC8MkQAFKvVmVHZWV8+klR8CMxX3fgMEj8UOiO2ph/qe0Oz6Y0ur0zsLUJwzk3qonTv7pV/PkvHAoGAZjkm0sv1r18cNVdwR7/s2CxGTW6hd30WLdQ4ayJsBIFI9H/5Re3RXbj7HvtfbGjEGPvAdnI3fmvfkbpNEtir327Kx3bWoadYuit1Gx4/h6xIy1U9rcrjlhOaf96DiEV+uQSpXFrBqjIt9vtxIBXvAALa329NY2Vwilx/63qx7GUCgYBZaDW8tDhzehwRb/3z48izWJI146Jz4YoR/fZBUOdZrMx3ttyHyOTYugK5ltP6JmhZXiF9Qf14CyU0lnK1I/2vOf9hgPgLyM9ert21KGK2q42318zk9ixEfm+AtQ6srscd7clxHUuN0Vfp85XF/Rd0H/Flejr+CcQsXSJ3zBppEg==");
		privateKeyArr.add("MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDNegj/DeKiM9mKEjcvep2jmdodXEZHUtRbyliJlA7xIQMc91R8Kkv7J3cKgC2Bh82U5SyZf7qPBLLsln8JLU68Y3aEZQZqSyY46YVIMcZlzZJS4rrSqH1OIEyZDfrvpioSnY/u+Aw3wohCvOMI2rkSgo8nYkDRx46jHHkY6bNeOL6qzyopUrHoK0Gfw1YJd66wf6x/5rtszVx5I+uLYhmj+6P7Sjr0r+YimYLGrhGsMDhUj87/wXoXRn5/2MA2scnlnNybRLVfX5UoqKuJn3mpTrFbkXGKeYHE6UdFZUPH3DH3AErXhh6SPDqyViFNHIKUoN/B/dAAWJ5Pr1FtAYF5AgMBAAECggEBAKT4CosEEeYabNiOoWHsNu4n0tdpwz72QGrlvUnP5mMwFvjFlj4OE2y0lb2HhYGOj76wdKtUwmqa4jBS7/FlP+a+kGPhXFIwvaJJ0mlRFTGc55LGWCpTfi8gfX8Qm1yW8wZ5HBtHaT/HXnD+h+UO/jHfQqHjH5mNd3Z7oLogv5Kv2Q5irn4rPuFJMTqzgXig8NrKyZXdAPbKOEn5k0K+4tS1VyDy4Wc5M3itXjyC0sH5wOHHObLxrIkRL99vEqmbTUfUDvtPWteUuBZdRe17NcdOlN2zo/sb+9A9X4slkJIOGqPxha/tDmattqoI3wVmsNyEieVOM4IPFW2IplVI1YECgYEA9yLhS6rjFba5tMz+1b0+BakLtSZPoq5UyMyhwB6LkEGJr71Xe9XfpJeTFe4ijotR7n1LyypXOqUEz/gu6q8gJIcJGFlmfR8wutYk9Prf3tz3KF1+pMWDZky8irtiThwjYul6XG3u29OQFFy0Q+mcDhVwjA/sVqkjR0FfyhdlREkCgYEA1NimxHwGJ0p0uYMVjpiq5h1m/kykApfVmhceXtcwX1wSGQhHTfnoKnPlYVIJivooORPBiyIeyy9q8y6MytjJTlyepEBRuOuF8vNHR3phphBX2H2qKtFZRLFDipp/7DCozaRCtWXsc4znfZ/7X1EDzbdwopVFESmd/wYvZgbM87ECgYEA5w6UZ2NxBscdHz4d8AYLq80d5hLYl7e4CzjO7clhINE1grpaxavzeXZBjVpksrLtOjWpHF0Mywan1i0q6D4tphkeVsaW/Nqhe71lNiosDri21+V512HW9Vk/WdHSGkdSilLSFQKvNJW7el4mJ+yM+9ntrPXiOC/QjPlBLrfq9QkCgYBzzDbWuP8EC077yqREwyxfK2noOjwUqRRt09wTDxHjH409DzLz6l10Ez+dNeu5L6YIf4YRswt70Z1nFlFE3rKOrnckt1V+vKxQZCjIa32KwmN4hc25o9HkPGiZlLq5/jMoRhCA7iW5K9SZlRtGXSYrmnxuB7Xew3yQzYWmBVcl0QKBgQDcIEoPh0QXTDmbqllsn2HZaBaBN27NvZ8L6Llms8ZwpHx5Vw/3wgsVYPnk6HGqGwuqHTCye2M7nRryO10LvoCfACOY1W0eIkJcYjPCGvGgOZoLUp1YPoqz4E0Hoz3eu0AgqJYBj1R8LwCwnnrnULMMy3HZuEe2EXXlnuac8YleZQ==");
		privateKeyArr.add("MIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQCtFJ6ELfabK8brxrob3d0o6I2iWaNPxse5jj/OLqizZv9x29gdCq2S6HjghNpcELGSsN0hR5E0eoRkujViT4G6NpgMJ1YyDhJkXhRMBcsvUMCYMvVEcZwK8YWltJXIRfd/L7FQM0CYQquaN1kcUh7kYwfiioXunthPV4OY02N9Od8fVOBCUc8NLsWW0vR/SOPmC+BQe0IQ08Ld8inQDhWl9efsNQyNyvM8z3KQuWOyH0zPiatrKftHSLWCPzHSlUhc04TTqbEPOTAnnGy0pPrAlyiiLOo0ff1J3+IpPkfqNI46sb9mIy9SZr4RZHp5Q9U0PbfuKeO3bShqgf3bTD35AgMBAAECggEBAKdY1mOrJVOnIjB59xxWii2xnLAqx1KtOhNZTKwIRSkhHz9xdyWtW2I90BIVoiN+KJNS2pwA3I7HHxddS5yAj0gC3URzDE5deL7+j9VpjKl1BKKkMq04w8149OXhEymPLNwWuvR2ebA+VjlH5qsRY7kjX05U7WZow3EDhsPPL9S09m/Azbu6wjNBM23eFbZIPn0S3ILIeTGMDOa5vR91HzJY/aoStTIRe+NUkEdmiRQxKDi6UdHBpA4zel7nun1vxT5hQkrHYFnhjMXmyWUMlhXc6KeyQLixa0V1wOb9VF313h/m9FZiOTnV0W+G1Q1TVEJpHsAw0Zqi4gGpwJ8Ae+ECgYEA27hwbNMDvolrXyWPMsq4Zq0pioQdlgToIj/a8vOQ8nNPy9xS0+xyk3xNszqct8Cpclfor8pSrMxvzcRh1eYN+pw9o0bFUV6OoMPGVA6s0mb5T1A/Are3A7pywk3YPAE/3dcNF/ctnS94WsKHqLVo4PvDpACryxDgmrekKjob990CgYEAyai3KhLsf48FbXGKlog8yv7Qw0KUvufB1/yoK78Tk8FG6yhGnFGVmMDeXMjDt24aJrw7+uzNv6ZLqe2DJdj7Wsjn6C0EAKnpZ2+3O72YceagIBlI1+vipi3CNsLNUfVwQ81uSmDVRLaW+yBq2ytqaKOQbj26qDPsb9EFrzOmqs0CgYA+8uCCzRHNjOFOKRyVmK6r/ABixucTC+TVqyW3ZUCptY+vADharutEheBc8PXlTzU8pSLs+jIlf4yojxLYjUiD/C9MkAIIBecm9+/iNTIeNZJHvt3OkYPFda1bLaI9zr3VeL8vloli9y6sEf97vj2F95tdaTPOwc8XhHVsA6nvoQKBgQDF2Ltrkglp1L30dFMOATfzyTC0gZxB+EscRwwPb3YbnqKfkHJGZ1yn84G18lrimikaG8+VDcOG5faSDy5+cXWZykaMaa3loM4X52kUOZ1ZEnXDSEtJXGqPs5E5/MFISc8NFn3Ah2R199YFJ/budJf/dYn8Pp/k6pxrz90N2VUJeQKBgFuM+VixSECq9ErkuQL3O1Cug9if35lwsIpTqkAmpOz/FlKtiXpjcr7DLsEnHWOib7BkzWo4putvdH7RdfHEbpdXPb1uqT7gVJnWTiseu/5LIDHKNVc++BmPE46KvGPnVEhpoBzb2f/0N7KmZsa6M1FkrUhLcwCR2R40ZSK01efy");
		privateKeyArr.add("MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQDy0uTDaQKJ98Gf8Bev99K1Aii61elU+o8RbhCujdPItaxPVHUk8iT8qUgijrSQX5zvBQRkP7wgW40vaavpMn/PcHxNmFemw3/C0cOJUWLT3nFJJFzl+nIPVFJ3kZnRUrLO1+jfgDqkvblyNehR7rZXpZs4EYRUbcslo22ur/K4ryRIogB0ICjP4OFjAq40S7OTs9HBEnLylDP0leLZJJqnQN1yGa1Ahx5lY6TJ+w9RtdsMwqap4b8AicnJSGwubR9l0gcY6hWRkboaspaRTVWr/kvn3XrYHC1zE30iSwHsjkJ3JgDWah34it+DllV/z8lsO4+eXaclNhYqIj6yjk9ZAgMBAAECggEAU58OysCZ8DtTAaoj7iRw+obA0f6iePJEXKNDuWj8Gu19ZmBWax+8XwpI3iW4xtM2bxWSOpe8SIRerYo9enQ6kYxSMkKZRMOkdsnYBazyVLYQ2zhbiZNiviays5x/lRdenl66QmWdTGhNuagY1kZXov1T484cfRrGT7LlLbhH5RM3uJ88GweapZrSzr5ecFqobc6JljF/NYzQLiTk6E83bckQUf1yQh8eNKR3YSRzc5fiXSvaSRFSVzdHYa65ZOOg+WjWYVOKe6SZmfRVxyN8coxat0ttpBhCq+LlXCxombgWautZZKCREPmZJskoQJIBg9SbbskJl8IUAPKUoAtUUQKBgQD67KfY+exT9TCieCt9ib3r3jJFDhAJNp9r5EG4NR39nqtgvrfXr6Rjzjzz7jm+AkxchwsdqrhGBtVGqT5GWQjFOZqx0ji1Pv2V4C79yKVMYoPyHDKGfA6G6Wj5dFIYoYn9FIgZlffFYuizA5O1s8V0nGOv+oQiaKOJQE16Fq7PrQKBgQD3vEp/7VB/th0CUQ/HOZOXFnGS/2dN66/uvm54atVDVUeX9RJ0AoEP3qk8swNWpBKHKkGEeMZRntc58Mt8/HT+c+29/ifD5o70esi/KcLA8856juEJ5Ny+ATb7svFzPrxa24BxKP1kVGdb5eaeMH2wRbT33T1pdYMpI+DARM4D3QKBgAmUW1wXPoR+CdtKBy8FwTBuDTFBti8D3NY7op6ruHdkRVquLUqYtAfzabROVfoBEHU/2pbJW7ugqyfFclExOPp+ln9PbUbOHtRH+MNLk7P01uC5XtxvhAZ2hsFvRWsXT7NPw1pmtUzd19BtxIfdUx5+kfe38q91mzi0McEFeKsJAoGAXPDkFkhnGfKtwW+99qUwLM+7vkVZcU9JyszgzwZtifxVhrnnuWQzHUwQu/gA+aFGXjVJLTTOWlK4NkGTZgmkrs25VL0kGAfIfAoQhD9blF4jibFO1hJpilMUWKuSkATqTz/oWQvivKA5wq1mrtRMYzRTp2X2Izl2Apo2OIvXqnUCgYA9fxCmOMgrDtVs0ywwafN7gbgH4UBVSo7xR5bgZce4Or0j9SSlQDyRdQnQO1kZW9eKI7/7XtZTOyEHCH0qNxkRpwTzTfeaqKNSiyBSEn2SOuf5dI9ivG/3IfxxkDSE1J2ZE9UICXQb2JpK3jFBUKxV8jEOxSKMYFLBn7TE1S7Qig==");
		privateKeyArr.add("MIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQCHahi74ouPNwxvCoVE5Jhs0zzQYY+sMa/80mK5om2Y5HGgNgv2garg4UbRXVxHzeRujslR3gHVvH488o4BzmnN7L/tkt72+1HiQ5heOxeNu/oI8tGzMAvb94ZVSNTM7+9kAg+9m2K876MEd+sR5liAVVRCROtZISLrcNzwmorhdkk4OZrsAMZDGm3fzZwq4VRqCEhi040SXhyUaGyqukngxBinMlZN9Lsbfm82ml3k3tnyHg7M7KJ0aa3nGKngkni7qYVEW4+PZcIT9k3o/fUFcRsbUr2JbndP/2S5qhDxheIp2Oi5GzaKB9itTQKThVq0477/7YBm32WcKVwBsGepAgMBAAECggEAO3IF/aUMIwjFepGhw4aeq1doIQpTKgJ+AXzSPi/h8PaIMw7G3aY6v5Hlps9XTWZDW41vL3NIVu3ydQr98CkPJYlDECYjn0Tgw3VtFCDYzC2zK+58xC7ZZe0ZmaLpWDYUX1DQXCo0hECmzbVfCnKWc3ACFz1uG6iCTd00AKO3SBYjwKjO1mt1rFnRoKSLqI7JVkVIiOjCfIbQjch68lunGDoOIQbLKODfGfc1X0pWv6mME3ssvFcPlkt0Ci09sxEi+WNdwxkQCRxxFYQVbiHg6K2V1Sm/rrIM70yFYwJ+dCIg+2KtymAtEjHe68ZktSiRdQIW92pHDdDrlwaJpeukAQKBgQC7iaDlPIAwgZII0nhZQTOdVXkzK+JCc3RC36z84EwTqNU9RkfjvPv+3+M1nS+d6wnUwGvHFMc0UCKmWW+JdjSONQ555og6V6qsYI/lQeG2AMtEYIlk9wctMBrqFUAJHWRc1H1SxMSoO69Udzk90yzbfkZyesKtrTIztJ3O/KWeaQKBgQC42Uju7OWdJKUeQRVMejde31MaJHnrT17DOVLFImkAmWk4o7J5+PSJGLkKKuwX2qZ8OXrlZiSBZy6uYRrmSjywpcOS/PPs9yA8vwvVvgU1XhsBU82OYk1qwEKLVuBvKo/9jUbcQiBIM/slpQ+nP8GGel56Z0tC+87RRV28tbHXQQKBgD9YoMFt6zr3OVXDiiVT8dROP886HoYlq3q/RRZxySDG4ah96eCSQGh6RawheSkVcE+t43numc8g1mNsSFGdXOlAILCqXw+d9yecwl5FH7GzmPVyylYRXxozapPxM50gkXsNx3tCvc65wmJ8lxg8EaXehHs83i9+FjwC4V8+Vc8pAoGAWIzmjmZ33J6oZuTgsiE+EznCkpx0t0/vYnA8gWlpibr0GAj7P8kOQ/rO8dr7/LVm2c2jXO9gf4kRaMHl4/oeNrVCClEY/SSpkdAneD4uOpGZODqQFyxqT8BIYH2+yCJIljsufedDlbMpFbCL3iABsk0+oz6GZFFCkye6ruMPjcECgYB5MTagpH+iVCRnLr5BuEmZXJz0V6Jt3iJQzyR1EOUxf/hTsbWlx8WkPOiFRfVNVe2MlM6LgMiVH9klJGPFKUqqcp5N7trvsRqUisNfWXQMNXX+x1M+hgWCkcvaNU0LQlLV9KLLHQmtZ2RoBGH8SKC+7M8c1eaNAp54uuWxZ9M68A==");

		publicKeyArr.add("966effdd43fd9683b111c0c90e1cb1da396edf397e7bd7b85ef0b5ca48ff7abadaefe16e00b01bfe00793de7e8514ed3a36570efd33d6c23d7f9497ca459068150673b389de6a7a825b453dd0d6fa545ab505745b2122cd07c55e58e2834060466581493bb098aa456f4ccebadc63651447780f6535ee13cca224713ae988608e1194eec4b9c43056d158b92ac7743aa5b2618e29289e989d3dc098996ae858ed9737bdfb362dcffe628d1eee559c0858f833c70eed830439433e612ed4cfd9079bd566f7408260d1b3b716c032480e650134ad7352b654d6dfec4a5a46beda8e8677ec14ac3d1a2e3e50a28776b92ce275bcb21f047e1343eeb8d3eb517ff99");
		publicKeyArr.add("cd7a08ff0de2a233d98a12372f7a9da399da1d5c464752d45bca5889940ef121031cf7547c2a4bfb27770a802d8187cd94e52c997fba8f04b2ec967f092d4ebc63768465066a4b2638e9854831c665cd9252e2bad2a87d4e204c990dfaefa62a129d8feef80c37c28842bce308dab912828f276240d1c78ea31c7918e9b35e38beaacf2a2952b1e82b419fc3560977aeb07fac7fe6bb6ccd5c7923eb8b6219a3fba3fb4a3af4afe6229982c6ae11ac3038548fceffc17a17467e7fd8c036b1c9e59cdc9b44b55f5f9528a8ab899f79a94eb15b91718a7981c4e947456543c7dc31f7004ad7861e923c3ab256214d1c8294a0dfc1fdd000589e4faf516d018179");
		publicKeyArr.add("ad149e842df69b2bc6ebc6ba1bdddd28e88da259a34fc6c7b98e3fce2ea8b366ff71dbd81d0aad92e878e084da5c10b192b0dd214791347a8464ba35624f81ba36980c2756320e12645e144c05cb2f50c09832f544719c0af185a5b495c845f77f2fb15033409842ab9a37591c521ee46307e28a85ee9ed84f578398d3637d39df1f54e04251cf0d2ec596d2f47f48e3e60be0507b4210d3c2ddf229d00e15a5f5e7ec350c8dcaf33ccf7290b963b21f4ccf89ab6b29fb4748b5823f31d295485cd384d3a9b10f3930279c6cb4a4fac09728a22cea347dfd49dfe2293e47ea348e3ab1bf66232f5266be11647a7943d5343db7ee29e3b76d286a81fddb4c3df9");
		publicKeyArr.add("f2d2e4c3690289f7c19ff017aff7d2b50228bad5e954fa8f116e10ae8dd3c8b5ac4f547524f224fca948228eb4905f9cef0504643fbc205b8d2f69abe9327fcf707c4d9857a6c37fc2d1c3895162d3de7149245ce5fa720f5452779199d152b2ced7e8df803aa4bdb97235e851eeb657a59b381184546dcb25a36daeaff2b8af2448a200742028cfe0e16302ae344bb393b3d1c11272f29433f495e2d9249aa740dd7219ad40871e6563a4c9fb0f51b5db0cc2a6a9e1bf0089c9c9486c2e6d1f65d20718ea159191ba1ab296914d55abfe4be7dd7ad81c2d73137d224b01ec8e42772600d66a1df88adf8396557fcfc96c3b8f9e5da72536162a223eb28e4f59");
		publicKeyArr.add("876a18bbe28b8f370c6f0a8544e4986cd33cd0618fac31affcd262b9a26d98e471a0360bf681aae0e146d15d5c47cde46e8ec951de01d5bc7e3cf28e01ce69cdecbfed92def6fb51e243985e3b178dbbfa08f2d1b3300bdbf7865548d4ccefef64020fbd9b62bcefa30477eb11e6588055544244eb592122eb70dcf09a8ae1764938399aec00c6431a6ddfcd9c2ae1546a084862d38d125e1c94686caaba49e0c418a732564df4bb1b7e6f369a5de4ded9f21e0ecceca27469ade718a9e09278bba985445b8f8f65c213f64de8fdf505711b1b52bd896e774fff64b9aa10f185e229d8e8b91b368a07d8ad4d0293855ab4e3beffed8066df659c295c01b067a9");

	}
	
	public String getPublicKeyModules() {
		return publicKeyArr.get(rnum);
	}

	public String getPublicKeyExponent() throws Exception {
		return "10001";
	}

	public PrivateKey getPrivateKey() throws Exception {
		
		try {
			logger.info("getPrivateKey()==============================");
			String privateStr = privateKeyArr.get(rnum);						// 암호화할 개인키를 가져온다
			byte[] bPrivateKey = Base64.decodeBase64(privateStr.getBytes());	// 암호화된 값은 byte 배열
			
			KeyFactory keyFactory = KeyFactory.getInstance("RSA");
			PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(bPrivateKey);
			privateKey = keyFactory.generatePrivate(keySpec);
			
		} catch (Exception e) {
			logger.error("cause : " + e.getClass() + ", line : " + e.getStackTrace()[0].getLineNumber());
		}
		return privateKey;
	}

}
